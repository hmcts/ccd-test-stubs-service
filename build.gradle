plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.7.RELEASE'
  id 'org.springframework.boot' version '2.1.4.RELEASE' // remove tomcat version force below when updating spring boot version
  id 'org.owasp.dependencycheck' version '5.1.0'
  id 'com.github.ben-manes.versions' version '0.20.0'
  id 'org.sonarqube' version '2.6.2'
}

group = 'uk.gov.hmcts.reform.ccd'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform{
    includeTags 'integration'
  }
  // set your environment variables here
  environment("WIREMOCK_SERVER_MAPPINGS_PATH", "wiremock")
}

task smoke(type: Test) {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
  useJUnitPlatform {
    includeTags 'smoke'
  }
}

task functional(type: Test) {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform {
    includeTags 'functional'
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.18'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.9.0"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ccd-test-stubs-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ccd-test-stubs-service"
    property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/junitPlatformTest.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
    property "sonar.junit.reportPaths", "${project.buildDir}/test-results/junit-platform"
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

ext {
  groovyVersion = '2.5.7'
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  junit           : '5.3.2',
  reformLogging   : '5.0.1',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2'
]

dependencyManagement {
  dependencies {
    // CVE-2019-0232 - command line injections on windows - fixed on spring boot master but not released
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.19') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }
  }
}

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
        details.useVersion '2.10.0'
      }
    }
  }
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.3'

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
  compile (group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.1.0.RELEASE') {
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  }
  compile group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.23.2'
  compile group: 'org.codehaus.groovy', name: 'groovy-json', version: groovyVersion
  compile group: 'org.codehaus.groovy', name: 'groovy', version: groovyVersion
  compile group: 'org.codehaus.groovy', name: 'groovy-xml', version: groovyVersion

  // CVE-2019-10086 force update of commons-beanutils.
  compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
  
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile(group: 'io.rest-assured', name: 'rest-assured', version: '4.0.0') {
    exclude group: 'org.apache.sling', module: 'org.apache.sling.javax.activation'
  }
  testCompile group: 'io.rest-assured', name: 'json-path', version: '4.0.0'
  testCompile(group: 'io.rest-assured', name: 'xml-path', version: '4.0.0') {
    exclude group: 'org.apache.sling', module: 'org.apache.sling.javax.activation'
  }

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath
  smokeTestCompile sourceSets.test.runtimeClasspath
  
  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile sourceSets.test.runtimeClasspath
}

test {
  useJUnitPlatform()
  failFast = true
}

mainClassName = 'uk.gov.hmcts.reform.ccd.test.stubs.service.Application'

bootJar {
  archiveName = 'ccd-test-stubs-service.jar'

  manifest {
    attributes('Implementation-Title': project.name)
    attributes('Implementation-Version': project.version.toString())
  }
  from('wiremock/mappings') {
    into 'wiremock/mappings'
  }
}

// for cnp pipeline
task dependencyCheck(dependsOn: dependencyCheckAnalyze)
